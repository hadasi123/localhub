{"ast":null,"code":"// Weather service for LocalHub - Data Layer\n\nimport { createWeatherData, WeatherTypes } from '../types';\n\n// Mock weather data for Israel\nconst mockWeatherData = {\n  temperature: 22,\n  description: 'Partly cloudy',\n  icon: WeatherTypes.CLOUDY,\n  location: 'Israel',\n  humidity: 65,\n  windSpeed: 12,\n  timestamp: new Date().toISOString()\n};\n\n// Weather icons mapping\nexport const weatherIcons = {\n  [WeatherTypes.CLEAR]: '‚òÄÔ∏è',\n  [WeatherTypes.CLOUDY]: '‚òÅÔ∏è',\n  [WeatherTypes.RAINY]: 'üåßÔ∏è',\n  [WeatherTypes.STORMY]: '‚õàÔ∏è',\n  [WeatherTypes.SNOWY]: '‚ùÑÔ∏è',\n  [WeatherTypes.FOGGY]: 'üå´Ô∏è'\n};\n\n// Weather service class\nclass WeatherService {\n  constructor() {\n    this.cache = null;\n    this.cacheExpiry = 10 * 60 * 1000; // 10 minutes\n  }\n\n  // Get current weather for Israel\n  async getCurrentWeather() {\n    try {\n      // Check cache first\n      if (this.cache && this.isCacheValid()) {\n        return this.cache;\n      }\n\n      // In a real app, this would call an actual weather API\n      // For demo purposes, we'll use mock data with some randomization\n      const weatherData = this.generateMockWeather();\n\n      // Cache the result\n      this.cache = weatherData;\n      this.cacheTimestamp = Date.now();\n      return weatherData;\n    } catch (error) {\n      console.error('Error fetching weather data:', error);\n      // Return fallback data\n      return createWeatherData(mockWeatherData);\n    }\n  }\n\n  // Generate mock weather data with some variation\n  generateMockWeather() {\n    const baseTemp = 20 + Math.random() * 10; // 20-30¬∞C\n    const weatherTypes = Object.values(WeatherTypes);\n    const randomType = weatherTypes[Math.floor(Math.random() * weatherTypes.length)];\n    const descriptions = {\n      [WeatherTypes.CLEAR]: ['Clear sky', 'Sunny', 'Bright and clear'],\n      [WeatherTypes.CLOUDY]: ['Partly cloudy', 'Mostly cloudy', 'Overcast'],\n      [WeatherTypes.RAINY]: ['Light rain', 'Moderate rain', 'Heavy rain'],\n      [WeatherTypes.STORMY]: ['Thunderstorm', 'Heavy storm', 'Severe weather'],\n      [WeatherTypes.SNOWY]: ['Light snow', 'Heavy snow', 'Blizzard'],\n      [WeatherTypes.FOGGY]: ['Foggy', 'Misty', 'Low visibility']\n    };\n    const randomDescription = descriptions[randomType][Math.floor(Math.random() * descriptions[randomType].length)];\n    return createWeatherData({\n      temperature: Math.round(baseTemp),\n      description: randomDescription,\n      icon: randomType,\n      location: 'Israel',\n      humidity: Math.round(50 + Math.random() * 30),\n      // 50-80%\n      windSpeed: Math.round(5 + Math.random() * 15),\n      // 5-20 km/h\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  // Check if cache is still valid\n  isCacheValid() {\n    return this.cacheTimestamp && Date.now() - this.cacheTimestamp < this.cacheExpiry;\n  }\n\n  // Get weather icon\n  getWeatherIcon(weatherType) {\n    return weatherIcons[weatherType] || weatherIcons[WeatherTypes.CLEAR];\n  }\n\n  // Format temperature\n  formatTemperature(temp) {\n    return `${temp}¬∞C`;\n  }\n\n  // Get weather description with emoji\n  getWeatherDescription(weather) {\n    const icon = this.getWeatherIcon(weather.icon);\n    return `${icon} ${weather.description}`;\n  }\n}\n\n// Create singleton instance\nconst weatherService = new WeatherService();\nexport default weatherService;","map":{"version":3,"names":["createWeatherData","WeatherTypes","mockWeatherData","temperature","description","icon","CLOUDY","location","humidity","windSpeed","timestamp","Date","toISOString","weatherIcons","CLEAR","RAINY","STORMY","SNOWY","FOGGY","WeatherService","constructor","cache","cacheExpiry","getCurrentWeather","isCacheValid","weatherData","generateMockWeather","cacheTimestamp","now","error","console","baseTemp","Math","random","weatherTypes","Object","values","randomType","floor","length","descriptions","randomDescription","round","getWeatherIcon","weatherType","formatTemperature","temp","getWeatherDescription","weather","weatherService"],"sources":["/Users/hadascohen/experiments/localhub/src/services/weatherService.js"],"sourcesContent":["// Weather service for LocalHub - Data Layer\n\nimport { createWeatherData, WeatherTypes } from '../types';\n\n// Mock weather data for Israel\nconst mockWeatherData = {\n  temperature: 22,\n  description: 'Partly cloudy',\n  icon: WeatherTypes.CLOUDY,\n  location: 'Israel',\n  humidity: 65,\n  windSpeed: 12,\n  timestamp: new Date().toISOString()\n};\n\n// Weather icons mapping\nexport const weatherIcons = {\n  [WeatherTypes.CLEAR]: '‚òÄÔ∏è',\n  [WeatherTypes.CLOUDY]: '‚òÅÔ∏è',\n  [WeatherTypes.RAINY]: 'üåßÔ∏è',\n  [WeatherTypes.STORMY]: '‚õàÔ∏è',\n  [WeatherTypes.SNOWY]: '‚ùÑÔ∏è',\n  [WeatherTypes.FOGGY]: 'üå´Ô∏è'\n};\n\n// Weather service class\nclass WeatherService {\n  constructor() {\n    this.cache = null;\n    this.cacheExpiry = 10 * 60 * 1000; // 10 minutes\n  }\n\n  // Get current weather for Israel\n  async getCurrentWeather() {\n    try {\n      // Check cache first\n      if (this.cache && this.isCacheValid()) {\n        return this.cache;\n      }\n\n      // In a real app, this would call an actual weather API\n      // For demo purposes, we'll use mock data with some randomization\n      const weatherData = this.generateMockWeather();\n      \n      // Cache the result\n      this.cache = weatherData;\n      this.cacheTimestamp = Date.now();\n      \n      return weatherData;\n    } catch (error) {\n      console.error('Error fetching weather data:', error);\n      // Return fallback data\n      return createWeatherData(mockWeatherData);\n    }\n  }\n\n  // Generate mock weather data with some variation\n  generateMockWeather() {\n    const baseTemp = 20 + Math.random() * 10; // 20-30¬∞C\n    const weatherTypes = Object.values(WeatherTypes);\n    const randomType = weatherTypes[Math.floor(Math.random() * weatherTypes.length)];\n    \n    const descriptions = {\n      [WeatherTypes.CLEAR]: ['Clear sky', 'Sunny', 'Bright and clear'],\n      [WeatherTypes.CLOUDY]: ['Partly cloudy', 'Mostly cloudy', 'Overcast'],\n      [WeatherTypes.RAINY]: ['Light rain', 'Moderate rain', 'Heavy rain'],\n      [WeatherTypes.STORMY]: ['Thunderstorm', 'Heavy storm', 'Severe weather'],\n      [WeatherTypes.SNOWY]: ['Light snow', 'Heavy snow', 'Blizzard'],\n      [WeatherTypes.FOGGY]: ['Foggy', 'Misty', 'Low visibility']\n    };\n\n    const randomDescription = descriptions[randomType][\n      Math.floor(Math.random() * descriptions[randomType].length)\n    ];\n\n    return createWeatherData({\n      temperature: Math.round(baseTemp),\n      description: randomDescription,\n      icon: randomType,\n      location: 'Israel',\n      humidity: Math.round(50 + Math.random() * 30), // 50-80%\n      windSpeed: Math.round(5 + Math.random() * 15), // 5-20 km/h\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  // Check if cache is still valid\n  isCacheValid() {\n    return this.cacheTimestamp && \n           (Date.now() - this.cacheTimestamp) < this.cacheExpiry;\n  }\n\n  // Get weather icon\n  getWeatherIcon(weatherType) {\n    return weatherIcons[weatherType] || weatherIcons[WeatherTypes.CLEAR];\n  }\n\n  // Format temperature\n  formatTemperature(temp) {\n    return `${temp}¬∞C`;\n  }\n\n  // Get weather description with emoji\n  getWeatherDescription(weather) {\n    const icon = this.getWeatherIcon(weather.icon);\n    return `${icon} ${weather.description}`;\n  }\n}\n\n// Create singleton instance\nconst weatherService = new WeatherService();\n\nexport default weatherService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}